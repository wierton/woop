
#
# Description: script used to generate decoding ROM
# Usage: python gen_decoder.py -i [inputfile] {-o [outputfile]}(default=stdout)
# Author: bingo
# Date: 2017/4/29
# Version: 1.0
#

import csv
import sys
import getopt

##############################      
# argument parser
##############################
opts, args = getopt.getopt(sys.argv[1:], "i:o:h")

infile = ""
outfile = ""

for op, value in opts:
    if op == '-i':
        infile = value
    elif op == '-o':
        outfile = value
    elif op == '-h':
        print 'Usage: python gen_decoder.py -i [inputfile] {-o [outputfile]}(default=stdout)'
        sys.exit(0)

##############################      
# read from csv file
##############################
infp = open(infile, 'r')
reader = csv.reader(infp)

idx_list = []
fu_type_list = []
fu_op_list = []
b_src_list = []
ext_type_list = []
rd_sel_list = []
a_src_list = []
de_special_list = []
mask_list = []
value_list = []

def convert(str, bit, X, Z, O):
    if str == "X":
        return "0" * bit
    else:
        assert(len(str) == bit)
        return "".join(({"x": X, "0": Z, "1": O}[ch] for ch in str))


for row in reader:
    # remove useless cols
    row = [r.strip() for r in row[0:17]]
    # get implemented instructions
    if row[1] == '1':
        #print(row)
        idx = '/* ' + row[2].ljust(8) + "*/  "
        idx += ("{`INSTR_TYPE_" + row[3]).ljust(25) + ", "
        idx += "6'b" + row[4].rjust(6, '0') + "}"
        idx_list.append(idx)
        b_src_list.append(row[5])
        fu_type_list.append(row[6])
        fu_op_list.append(row[7])
        ext_type_list.append(row[8])
        rd_sel_list.append(row[9])
        a_src_list.append(row[10])
        de_special_list.append(row[11])
        mask_list.append(
            "".join([convert(row[r], b, "0", "1", "1") for (r, b) in [(12, 5), (13, 5), (14, 5), (15, 5), (16, 6)]])
        )
        value_list.append(
            "".join([convert(row[r], b, "0", "0", "1") for (r, b) in [(12, 5), (13, 5), (14, 5), (15, 5), (16, 6)]])
        )

if outfile == '':
    outfp = sys.stdout
else:
    outfp = open(outfile, 'w')


#######################################
# generate verilog source code
#######################################

def gen_block(outfp, idx_list, reg, col_list, prefix, default = "X"):
    print >> outfp,'\talways @(*) begin'
    print >> outfp,'\t\tcase(lookup_idx)'
    for i, idx in enumerate(idx_list):
        if(col_list[i] != 'X'):
            print >> outfp,'\t\t\t' + idx + ': ' + reg + ' = ' + prefix + col_list[i] + ';'
    print >> outfp,'\t\t\tdefault:      ' + reg + ' = ' + prefix + default + ";"
    print >> outfp,'\t\tendcase'
    print >> outfp,'\tend\n'

# module interface name
module_name = 'DCROM'
lookup_idx = 'lookup_idx'
fu_type = 'fu_type'
fu_op = 'fu_op'
b_src = 'b_src'
ext_type = 'ext_type'
rd_sel = 'rd_sel'
a_src = 'a_src'
de_special = 'de_special'


# module header
print >> outfp,'\n// This file is auto-generated by gen_decoder.py\n'
print >> outfp,'`include "decode.vh"\n'
print >> outfp,'module ' + module_name + ' # ('
print >> outfp,'`include "msg_param.vh"'
print >> outfp,') ('
print >> outfp,'\tinput [8 : 0] ' + lookup_idx + ','
print >> outfp,'\toutput reg [IDU_ISU_decode_fu_type_len - 1 : 0] ' + fu_type + ','
print >> outfp,'\toutput reg [IDU_ISU_decode_fu_op_len - 1 : 0] ' + fu_op + ','
print >> outfp,'\toutput reg [IDU_ISU_decode_b_src_len - 1 : 0] ' + b_src + ','
print >> outfp,'\toutput reg [IDU_ISU_decode_ext_type_len - 1 : 0] ' + ext_type + ','
print >> outfp,'\toutput reg [IDU_ISU_decode_rd_sel_len - 1 : 0] ' + rd_sel + ','
print >> outfp,'\toutput reg [IDU_ISU_decode_a_src_len - 1 : 0] ' + a_src + ','
print >> outfp,'\toutput reg [`DE_SPECIAL_LEN - 1 : 0] ' + de_special + ','
print >> outfp,'\toutput reg [25 : 0] ' + 'mask' + ','
print >> outfp,'\toutput reg [25 : 0] ' + 'value' 
print >> outfp,');\n'

gen_block(outfp, idx_list, fu_type, fu_type_list, '`FU_TYPE_')
gen_block(outfp, idx_list, fu_op, fu_op_list, '`FU_OP_')
gen_block(outfp, idx_list, b_src, b_src_list, '`B_SRC_')
gen_block(outfp, idx_list, ext_type, ext_type_list, '`EXT_TYPE_')
gen_block(outfp, idx_list, rd_sel, rd_sel_list, '`RD_SEL_')
gen_block(outfp, idx_list, a_src, a_src_list, '`A_SRC_')
gen_block(outfp, idx_list, de_special, de_special_list, '`DE_SPECIAL_')
gen_block(outfp, idx_list, "mask", mask_list, '26\'b', default = "0" * 26)
gen_block(outfp, idx_list, "value", value_list, '26\'b', default = "1" * 26)

print >> outfp,'endmodule'
